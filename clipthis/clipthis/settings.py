"""
Django settings for clipthis project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from urllib.parse import urlparse, parse_qs

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Load environment variables from a local .env file if present
def _load_dotenv(dotenv_path: Path) -> None:
    try:
        if dotenv_path.exists():
            for raw in dotenv_path.read_text().splitlines():
                line = raw.strip()
                if not line or line.startswith('#') or '=' not in line:
                    continue
                key, value = line.split('=', 1)
                key = key.strip()
                value = value.strip().strip('"').strip("'")
                os.environ.setdefault(key, value)
    except Exception:
        # Fail silently; env loading is best-effort
        pass


_load_dotenv(BASE_DIR / '.env')


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv(
    'SECRET_KEY',
    'django-insecure-b1ku+za8(lr5r%v1d41*lp31#)#sm^#!qvobva=-ne5x%f45)g'
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'true').lower() in {'1', 'true', 'yes', 'on'}

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'clipthis.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'clipthis.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases


def _parse_database_url(url: str) -> dict:
    parsed = urlparse(url)
    scheme = (parsed.scheme or '').lower()

    engine_map = {
        'sqlite': 'django.db.backends.sqlite3',
        'postgres': 'django.db.backends.postgresql',
        'postgresql': 'django.db.backends.postgresql',
        'psql': 'django.db.backends.postgresql',
        'mysql': 'django.db.backends.mysql',
        'mariadb': 'django.db.backends.mysql',
    }

    if scheme == 'sqlite':
        # Handle sqlite paths (relative or absolute)
        path = parsed.path or ''
        if path in {'', '/', '/:memory:'}:
            name = ':memory:'
        else:
            if path.startswith('/') and not path.startswith('//'):
                # Absolute path like sqlite:////abs/path.db -> parsed.path == '/abs/path.db'
                name = path
            else:
                # Relative path -> place under BASE_DIR
                name = str((BASE_DIR / path.lstrip('/')).resolve())
        return {
            'ENGINE': engine_map['sqlite'],
            'NAME': name,
        }

    engine = engine_map.get(scheme)
    if not engine:
        raise ValueError(f'Unsupported database scheme: {scheme!r}')

    config = {
        'ENGINE': engine,
        'NAME': (parsed.path.lstrip('/') or ''),
        'USER': parsed.username or '',
        'PASSWORD': parsed.password or '',
        'HOST': parsed.hostname or '',
        'PORT': str(parsed.port or ''),
    }

    # Query params (e.g., sslmode=require)
    query = parse_qs(parsed.query or '')
    if 'sslmode' in query and query['sslmode']:
        config['OPTIONS'] = {'sslmode': query['sslmode'][0]}
    return config


def _database_from_env() -> dict:
    # Prefer DATABASE_URL if set
    url = os.getenv('DATABASE_URL')
    if url:
        try:
            return _parse_database_url(url)
        except Exception:
            pass  # Fall back to individual settings or default sqlite

    # Individual settings (DB_ENGINE optional; defaults to sqlite3)
    engine = os.getenv('DB_ENGINE', 'django.db.backends.sqlite3')
    name = os.getenv('DB_NAME', str(BASE_DIR / 'db.sqlite3'))
    config = {
        'ENGINE': engine,
        'NAME': name,
        'USER': os.getenv('DB_USER', ''),
        'PASSWORD': os.getenv('DB_PASSWORD', ''),
        'HOST': os.getenv('DB_HOST', ''),
        'PORT': os.getenv('DB_PORT', ''),
    }
    sslmode = os.getenv('DB_SSLMODE')
    if sslmode:
        config['OPTIONS'] = {'sslmode': sslmode}
    return config


DATABASES = {
    'default': _database_from_env()
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
